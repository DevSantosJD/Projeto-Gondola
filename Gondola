import customtkinter as ctk
from tkinter import Image
from PIL import Image
from tkinter import messagebox
import datetime
import mysql.connector 
from tkinter import messagebox, ttk

#Iniciando janela principal
def interface():
    janela = ctk.CTk()#fg_color="#100D28"
    janela.title("Bem vindo ao Gondola")
    janela.geometry("700x400+500+200")
    janela.resizable(width=False, height=False)


    login_padrao= "supervisor"
    senha_padrao= "@supervisor"

    #Definindo Label
    frame = ctk.CTkFrame(janela, width=275, height=360, corner_radius= 50 )
    frame.place(relx=0.5, rely=0.5, anchor='center')

    #impede que o freame se ajusta ao label
    frame.pack_propagate(False) 

    #Criando labels e caixas de entrada
    label = ctk.CTkLabel(frame, text="Bem Vindo ao Gondola", font=("gliker", 20))
    label.pack(pady=20)

    label_id = ctk.CTkLabel(frame, text="Nome de Acesso", font=("gliker", 14))
    label_id.pack(pady=10)
    
    login = ctk.CTkEntry(frame)
    login.pack()

    label_senha = ctk.CTkLabel(frame, text="Senha", font=("gliker", 14))
    label_senha.pack()

    senha = ctk.CTkEntry(frame, show="*")
    senha.pack()

    #Função para acessár home após autenticação de usuário
    
    def verificar_login():
        login_digitado= login.get()#metodo get é utilizado para captar as informações digitasdas pelo usuário no campo Entry e podemos atribuir 
        #a uma variável
        senha_digitada= senha.get()
        

        if login_digitado.strip() == login_padrao and senha_digitada == senha_padrao:
            home()
        else:
            print("Login ou senha Incorreto!")

    #Função para acessár home após autenticação de usuário
    def home():
        janela_home= ctk.CTkToplevel(janela)#, fg_color="#100D28"
        janela_home.title("Home")

        # Define o tamanho da janela
        largura = 1920
        altura = 790

        # Define a posição desejada (por exemplo, x=100, y=100)
        x_offset = -10
        y_offset = -5
        janela_home.geometry(f"{largura}x{altura}+{x_offset}+{y_offset}")
        janela_home.minsize(width= 700, height= 400)
        janela.iconify()

        frame2= ctk.CTkFrame(janela_home, width= 245, height= 385, corner_radius= 10)
        frame2.place(relx=0.005, rely=0.14)

        frame3= ctk.CTkFrame(janela_home, width=1920, height= 100)
        frame3.place(relx=0, rely=0)

        frame4= ctk.CTkFrame(janela_home, width= 1260, height= 50, corner_radius= 10)
        frame4.place(relx= 0.170, rely= 0.14)

        frame5= ctk.CTkFrame(janela_home, width= 245, height= 245, corner_radius= 10)
        frame5.place(relx=0.005, rely=0.65)

        def vender_prod():
            # Conectar ao banco de dados
            conexao = mysql.connector.connect(
                host='localhost',
                user='root',
                password='',
                database='Cadastro_Func',
            )
            cursor = conexao.cursor()

            # Criar janela de vendas
            vendas_janela = ctk.CTkToplevel(janela_home)
            vendas_janela.title("Vender Produto")
            vendas_janela.geometry("1240x750+330+50")
            vendas_janela.lift()
            vendas_janela.attributes('-topmost', True)

            # Criar Treeview para selecionar o produto
            tree = ttk.Treeview(vendas_janela, columns=('ID', 'Titulo', 'Genero', 'Plataforma', 'Lancamento', 'Desenvolvedora', 'Preco', 'Estoque'), show='headings')
            tree.heading('ID', text='ID')
            tree.heading('Titulo', text='Titulo')
            tree.heading('Genero', text='Genero')
            tree.heading('Plataforma', text='Plataforma')
            tree.heading('Lancamento', text='Lancamento')
            tree.heading('Desenvolvedora', text='Desenvolvedora')
            tree.heading('Preco', text='Preco')
            tree.heading('Estoque', text='Estoque')

            # Preencher Treeview com os produtos disponíveis
            cursor.execute("SELECT * FROM games")
            resultados = cursor.fetchall()

            for row in resultados:
                tree.insert('', 'end', values=row)

            tree.grid(row=0, column=0, rowspan=6, columnspan=2, sticky='nsew', padx=10, pady=10)

            # Label e Entry para quantidade
            quantidade_label = ctk.CTkLabel(vendas_janela, text="Quantidade", font=("gliker", 20))
            quantidade_label.grid(row=10, column=0, padx=0.02, pady=0.8)
            
            quantidade_entry = ctk.CTkEntry(vendas_janela, placeholder_text="Quantidade", justify="center", width=100, height=10)
            quantidade_entry.grid(row=15, column=0, padx=0.2, pady=1)

            # Label e OptionMenu para forma de pagamento
            forma_pagamento_label = ctk.CTkLabel(vendas_janela, text="Forma de Pagamento", font=("gliker", 20))
            forma_pagamento_label.grid(row=10, column=1, padx=0.02, pady=10)

            

            formas_pagamento = ["Cartão de Crédito", "Cartão de Débito", "Dinheiro"]
            forma_pagamento_menu = ctk.CTkOptionMenu(vendas_janela, values=formas_pagamento)
            forma_pagamento_menu.grid(row=15, column=1, padx=0.2, pady=15)

            def confirmar_venda():
                selected_item = tree.selection()
                if not selected_item:
                    messagebox.showwarning("Aviso", "Por favor, selecione um produto.")
                    return

                quantidade = quantidade_entry.get().strip()
                if not quantidade.isdigit() or int(quantidade) <= 0:
                    messagebox.showwarning("Aviso", "Por favor, insira uma quantidade válida.")
                    return

                quantidade = int(quantidade)
                produto = tree.item(selected_item, 'values')
                produto_id = produto[0]
                estoque_atual = int(produto[7])

                if quantidade > estoque_atual:
                    messagebox.showwarning("Aviso", "Quantidade solicitada excede o estoque disponível.")
                    return

                novo_estoque = estoque_atual - quantidade

                # Capturar a forma de pagamento selecionada
                forma_pagamento = forma_pagamento_menu.get()

                # Atualizar estoque no banco de dados
                cursor.execute("UPDATE games SET estoqu = %s WHERE game_id = %s", (novo_estoque, produto_id))
                conexao.commit()

                # Registrar venda no banco de dados
                data_venda = datetime
                comando_venda = "INSERT INTO vendas (produto_id, quantidade, forma_pagamento, data_venda) VALUES (%s, %s, %s, %s)"
                cursor.execute(comando_venda, (produto_id, quantidade, forma_pagamento, data_venda))
                conexao.commit()

                messagebox.showinfo("Sucesso", "Venda realizada com sucesso.")
                
                # Atualizar Treeview
                tree.item(selected_item, values=(*produto[:7], novo_estoque))

            # Botão para confirmar a venda
            confirmar_button = ctk.CTkButton(vendas_janela, text="Confirmar Venda", command=confirmar_venda)
            confirmar_button.grid(row=16, column=0, padx=0.1, pady=3)

            # Fechar o cursor e a conexão ao fechar a janela
            def on_close():
                cursor.close()
                conexao.close()
                vendas_janela.destroy()

            vendas_janela.protocol("WM_DELETE_WINDOW", on_close)

        # Botão para abrir a janela de vendas
        bot_vender = ctk.CTkButton(frame5, text="Executar Venda", width=200, height=200, command=vender_prod)
        bot_vender.place(relx=0.5, rely=0.5, anchor="center")

        frame3.pack_propagate(False)

        logo= ctk.CTkLabel(frame3 ,text="Gondola", font=("gliker", 50))
        logo.place(relx=0.35, rely=0.25, )

        #pesquisar compras por ID
        def pesquisa_prod():
            nome_produto = pesquisa_compra.get().strip()
            if not nome_produto:
                messagebox.showinfo("Erro", "Por favor, insira o nome do produto para pesquisar.")
                return

            # Conexão com o banco de dados
            conexao = mysql.connector.connect(
                host='localhost',
                user='root',
                password='',
                database='Cadastro_Func',
            )
            cursor = conexao.cursor()

            comando = "SELECT * FROM games WHERE title LIKE %s"
            cursor.execute(comando, (f"%{nome_produto}%",))
            resultados = cursor.fetchall()

            if not resultados:
                messagebox.showinfo("Info", "Nenhum produto encontrado.")
                cursor.close()
                conexao.close()
                return

            # Criar janela para exibir os resultados da pesquisa
            resultados_janela = ctk.CTkToplevel(janela_home)
            resultados_janela.title("Resultados da Pesquisa")
            resultados_janela.geometry("1240x550+330+250")
            resultados_janela.lift()
            resultados_janela.attributes('-topmost', True)

            tree = ttk.Treeview(resultados_janela, columns=('ID', 'Titulo', 'Genero', 'Plataforma', 'Lancamento', 'Desenvolvedora', 'Preco', 'Estoque'), show='headings')
            tree.heading('ID', text='ID')
            tree.heading('Titulo', text='Titulo')
            tree.heading('Genero', text='Genero')
            tree.heading('Plataforma', text='Plataforma')
            tree.heading('Lancamento', text='Lancamento')
            tree.heading('Desenvolvedora', text='Desenvolvedora')
            tree.heading('Preco', text='Preco')
            tree.heading('Estoque', text='Estoque')

            for row in resultados:
                tree.insert('', 'end', values=row)

            tree.pack(fill='both', expand=True)

            # Fechando o cursor e a conexão
            cursor.close()
            conexao.close()

        # Labels e caixas de entrada para pesquisa de produtos
        label_Compra = ctk.CTkLabel(frame2, text="Produto", font=("gliker", 20))
        label_Compra.place(relx=0.35, rely=0.1)

        pesquisa_compra = ctk.CTkEntry(frame2, placeholder_text="Pesquisa por Nome", justify="center", width=200, height=30)
        pesquisa_compra.place(relx=0.1, rely=0.2)

        botao_prod = ctk.CTkButton(frame2, text="Pesquisar", command=pesquisa_prod)
        botao_prod.place(relx=0.2, rely=0.35)
         #pesquisar produtos por ID

        def pesquisa_cli():
            CPF = pesquisa_cliente.get()
    
            if not CPF:
                messagebox.showwarning("Aviso", "Por favor, insira um CPF para a pesquisa.")
                return
            
            # Conexão com o banco de dados
            conexao = mysql.connector.connect(
                host='localhost',
                user='root',
                password='',
                database='Cadastro_Func',
            )
            cursor = conexao.cursor()
            
            comando = "SELECT * FROM cadastro WHERE cpf = %s"
            cursor.execute(comando, (CPF,))
            resultados = cursor.fetchall()
            
            # Se não houver resultados, exibir mensagem de aviso
            if not resultados:
                messagebox.showinfo("Resultado", "Nenhum cliente encontrado com o CPF fornecido.")
            else:
                # Criar janela de resultados
                resultado_janela = ctk.CTkToplevel(janela_home)
                resultado_janela.title("Resultado da Pesquisa")
                resultado_janela.geometry("1240x550+330+250")
                resultado_janela.lift()
                resultado_janela.attributes('-topmost', True)
                
                # Criar Treeview para exibir os resultados
                tree = ttk.Treeview(resultado_janela, columns=('ID', 'Nome', 'CPF', 'Data de Nascimento', 'Rua', 'Número', 'Bairro', 'Cidade', 'Estado', 'CEP', 'Telefone', 'Email'), show='headings')
                tree.heading('ID', text='ID')
                tree.heading('Nome', text='Nome')
                tree.heading('CPF', text='CPF')
                tree.heading('Data de Nascimento', text='Data de Nascimento')
                tree.heading('Rua', text='Rua')
                tree.heading('Número', text='Número')
                tree.heading('Bairro', text='Bairro')
                tree.heading('Cidade', text='Cidade')
                tree.heading('Estado', text='Estado')
                tree.heading('CEP', text='CEP')
                tree.heading('Telefone', text='Telefone')
                tree.heading('Email', text='Email')

                tree.column('ID', width=5)
                tree.column('Nome', width=150)
                tree.column('CPF', width=100)
                tree.column('Data de Nascimento', width=50)
                tree.column('Rua', width=150)
                tree.column('Número', width=5)
                tree.column('Bairro', width=100)
                tree.column('Cidade', width=100)
                tree.column('Estado', width=50)
                tree.column('CEP', width=60)
                tree.column('Telefone', width=100)
                tree.column('Email', width=150)

                
                for row in resultados:
                    tree.insert('', 'end', values=row)
                
                tree.pack(fill='both', expand=True)
            
            # Fechar o cursor e a conexão
            cursor.close()
            conexao.close()

        label_cliente = ctk.CTkLabel(frame2, text="Cliente", font=("gliker", 20))
        label_cliente.place(relx=0.35, rely=0.5)

        pesquisa_cliente = ctk.CTkEntry(frame2, placeholder_text="Pesquisa", justify="center", width=200, height=30)
        pesquisa_cliente.place(relx=0.1, rely=0.6)

        botao_cli = ctk.CTkButton(frame2, text="Pesquisar", command=pesquisa_cli)
        botao_cli.place(relx=0.2, rely=0.75)

        #tela cadastro de produtod
        def cadastro_prod():
            tela_cadastro_prod= ctk.CTkToplevel(janela)
            tela_cadastro_prod.title("Cadastro de Produtos")
            tela_cadastro_prod.geometry("500x580+1260+250")
            tela_cadastro_prod.lift()
            tela_cadastro_prod.attributes('-topmost', True)

            #Cadastro de produtos
            def cadastrar():
                title = cad_titlo.get()
                gener = cad_genero.get()
                plataform = cad_plataforma.get()
                lancamento = cad_data.get()
                desenv = cad_desenvolvedora.get()
                prec = cad_preco.get()
                estoqu = cad_estoque.get()

                # Validações simples
                if not title or not prec or not estoqu:
                    messagebox.showerror("Erro", "Os campos Título, Preço e Estoque são obrigatórios.")
                    tela_cadastro_prod.lift()
                    tela_cadastro_prod.attributes('-topmost', False)
                    tela_cadastro_prod.after_idle(tela_cadastro_prod.attributes, '-topmost', False)
                    return

                try:
                    # Validação para o preço e estoque serem numéricos
                    prec = float(prec)
                    estoqu = int(estoqu)

                    # Validação para a data de lançamento
                    datetime.datetime.strptime(lancamento, '%Y-%m-%d')
                except ValueError as e:
                    messagebox.showerror("Erro", f"Formato de dado inválido: {e}")
                    return

                # Conexão com o banco de dados
                conexao = mysql.connector.connect(
                    host='localhost',
                    user='root',
                    password='',
                    database='Cadastro_Func',
                )
                # Cursor para executar comandos SQL
                cursor = conexao.cursor()

                # Verificar se o jogo já está cadastrado
                verifica_comando = '''
                SELECT COUNT(*) FROM games WHERE title = %s AND plataform = %s
                '''
                cursor.execute(verifica_comando, (title, plataform))
                resultado = cursor.fetchone()

                if resultado[0] > 0:
                    messagebox.showerror("Erro", "Jogo já cadastrado.")
                    return

                # Comando SQL para inserir dados
                comando = f'''
                INSERT INTO games (title, gener, plataform, lancamento, desenv, prec, estoqu)
                VALUES ("{title}", "{gener}", "{plataform}", "{lancamento}", "{desenv}", "{prec}", "{estoqu}")
                '''
                cursor.execute(comando)
                conexao.commit()

                # Fechando o cursor e a conexão
                cursor.close()
                conexao.close()
                
                # Aqui você pode adicionar a lógica para salvar os dados no banco de dados
                messagebox.showinfo("Sucesso", "Jogo cadastrado com sucesso!")
                

            titulo= ctk.CTkLabel(tela_cadastro_prod, text="Titulo", font=("gliker", 20))
            titulo.pack(pady= 5)

            cad_titlo= ctk.CTkEntry(tela_cadastro_prod, width= 400, height= 30)
            cad_titlo.pack(pady= 5)

            genero= ctk.CTkLabel(tela_cadastro_prod, text="Gênero", font=("gliker", 20))
            genero.pack(pady= 5)

            cad_genero= ctk.CTkEntry(tela_cadastro_prod, width= 400, height= 30)
            cad_genero.pack(pady= 5)

            plataforma= ctk.CTkLabel(tela_cadastro_prod, text="Plataforma", font=("gliker", 20))
            plataforma.pack(pady= 5)

            cad_plataforma= ctk.CTkEntry(tela_cadastro_prod, width= 400, height= 30)
            cad_plataforma.pack(pady= 5)

            data_lanca= ctk.CTkLabel(tela_cadastro_prod, text="Data de Lançamento", font=("gliker", 20))
            data_lanca.pack(pady= 5)

            cad_data= ctk.CTkEntry(tela_cadastro_prod, width= 400, height= 30)
            cad_data.pack(pady= 5)

            desenvolvedora= ctk.CTkLabel(tela_cadastro_prod, text="Desenvolvedora", font=("gliker", 20))
            desenvolvedora.pack(pady= 5)

            cad_desenvolvedora= ctk.CTkEntry(tela_cadastro_prod, width= 400, height= 30)
            cad_desenvolvedora.pack(pady= 5)

            preco= ctk.CTkLabel(tela_cadastro_prod, text="Preço", font=("gliker", 20))
            preco.pack(pady= 5)

            cad_preco= ctk.CTkEntry(tela_cadastro_prod, width= 400, height= 30)
            cad_preco.pack(pady= 5)

            estoque= ctk.CTkLabel(tela_cadastro_prod, text="Estoque", font=("gliker", 20))
            estoque.pack(pady= 5)

            cad_estoque= ctk.CTkEntry(tela_cadastro_prod, width= 400, height= 30)
            cad_estoque.pack(pady= 5)


            cadastro= ctk.CTkButton(tela_cadastro_prod, text="cadastrar", command= cadastrar, width= 135, height= 35)
            cadastro.pack(pady= 9)
            

        botao_cad_prod= ctk.CTkButton(frame4, text="Cadastro de Produtos", command= cadastro_prod, width= 235, height= 35)
        botao_cad_prod.place(relx=0.01, rely=0.15)

        
        def editar_prod():
            tela_edicao_prod = ctk.CTkToplevel(janela)
            tela_edicao_prod.title("Edição de Produtos")
            tela_edicao_prod.geometry("500x690+1260+100")
            tela_edicao_prod.lift()
            tela_edicao_prod.attributes('-topmost', True)

            def edit_prod():
                game_id = id_item.get()
                novo_titulo = cad_titulo.get()
                novo_genero = cad_genero.get()
                nova_plataforma = cad_plataforma.get()
                nova_data = cad_data.get()
                nova_desenvolvedora = cad_desenvolvedora.get()
                novo_preco = cad_preco.get()
                novo_estoque = cad_estoque.get()

                # Conexão com o banco de dados
                conexao = mysql.connector.connect(
                    host='localhost',
                    user='root',
                    password='',
                    database='Cadastro_Func',
                )
                cursor = conexao.cursor()

                # Atualizando os dados no banco de dados
                comando = """
                UPDATE games 
                SET title = %s, gener = %s, plataform = %s, lancamento = %s, desenv = %s, prec = %s, estoqu = %s
                WHERE game_id = %s
                """
                valores = (novo_titulo, novo_genero, nova_plataforma, nova_data, nova_desenvolvedora, novo_preco, novo_estoque, game_id)

                try:
                    cursor.execute(comando, valores)
                    conexao.commit()
                    messagebox.showinfo("Sucesso", "Produto editado com sucesso!")
                except Exception as e:
                    messagebox.showerror("Erro", f"Não foi possível editar o produto. Erro: {e}")
                finally:
                    cursor.close()
                    conexao.close()

                tela_edicao_prod.destroy()

            # Criando os campos de entrada e rótulos
            id_label = ctk.CTkLabel(tela_edicao_prod, text="ID do Produto", font=("gliker", 20))
            id_label.pack(pady=5)
            id_item = ctk.CTkEntry(tela_edicao_prod, width=400, height=30)
            id_item.pack(pady=5)

            titulo = ctk.CTkLabel(tela_edicao_prod, text="Título", font=("gliker", 20))
            titulo.pack(pady=5)
            cad_titulo = ctk.CTkEntry(tela_edicao_prod, width=400, height=30)
            cad_titulo.pack(pady=5)

            genero = ctk.CTkLabel(tela_edicao_prod, text="Gênero", font=("gliker", 20))
            genero.pack(pady=5)
            cad_genero = ctk.CTkEntry(tela_edicao_prod, width=400, height=30)
            cad_genero.pack(pady=5)

            plataforma = ctk.CTkLabel(tela_edicao_prod, text="Plataforma", font=("gliker", 20))
            plataforma.pack(pady=5)
            cad_plataforma = ctk.CTkEntry(tela_edicao_prod, width=400, height=30)
            cad_plataforma.pack(pady=5)

            data_lanca = ctk.CTkLabel(tela_edicao_prod, text="Data de Lançamento", font=("gliker", 20))
            data_lanca.pack(pady=5)
            cad_data = ctk.CTkEntry(tela_edicao_prod, width=400, height=30)
            cad_data.pack(pady=5)

            desenvolvedora = ctk.CTkLabel(tela_edicao_prod, text="Desenvolvedora", font=("gliker", 20))
            desenvolvedora.pack(pady=5)
            cad_desenvolvedora = ctk.CTkEntry(tela_edicao_prod, width=400, height=30)
            cad_desenvolvedora.pack(pady=5)

            preco = ctk.CTkLabel(tela_edicao_prod, text="Preço", font=("gliker", 20))
            preco.pack(pady=5)
            cad_preco = ctk.CTkEntry(tela_edicao_prod, width=400, height=30)
            cad_preco.pack(pady=5)

            estoque = ctk.CTkLabel(tela_edicao_prod, text="Estoque", font=("gliker", 20))
            estoque.pack(pady=5)
            cad_estoque = ctk.CTkEntry(tela_edicao_prod, width=400, height=30)
            cad_estoque.pack(pady=5)

            editar_p = ctk.CTkButton(tela_edicao_prod, text="Editar", command=edit_prod, width=135, height=35)
            editar_p.pack(pady=5)

        botao_edit_prod= ctk.CTkButton(frame4, text="Editar Produtos", command= editar_prod, width= 185, height= 35)
        botao_edit_prod.place(relx=0.21, rely=0.15)
        
            
        
        #tela cadastro de clientes
        def cadastro_cli():
            tela_cadastro_cli= ctk.CTkToplevel(janela)
            tela_cadastro_cli.title("Cadastro de Clientes")
            tela_cadastro_cli.geometry("500x580+1260+250")
            tela_cadastro_cli.lift()
            tela_cadastro_cli.attributes('-topmost', True)

            def cadastro():
                nome = cad_nome.get()
                cpf = cad_cpf.get()
                data_nascimento = cad_data_nascimento.get()
                rua= cad_rua.get()
                numero= cad_numero.get()
                bairro= cad_bairro.get()
                cidade= cad_cidade.get()
                estado= cad_estado.get()
                cep= cad_cep.get()
                telefone = cad_telefone.get()
                email = cad_email.get()

                print(nome, cpf, telefone)

                # Validações simples
                if not nome or not cpf or not telefone:
                    messagebox.showerror("Erro", "Os campos Nome, CPF e Telefone são obrigatórios.")
                    tela_cadastro_cli.lift()
                    tela_cadastro_cli.attributes('-topmost', False)
                    tela_cadastro_cli.after_idle(tela_cadastro_cli.attributes, '-topmost', False)
                    return

                try:
                    # Validação para o CPF e telefone serem numéricos (simplificada)
                    cpf = int(cpf)
                    telefone = int(telefone)

                    # Validação para a data de nascimento
                    datetime.datetime.strptime(data_nascimento, '%Y-%m-%d')
                except ValueError as e:
                    messagebox.showerror("Erro", f"Formato de dado inválido: {e}")
                    return

                try:
                    # Conexão com o banco de dados
                    conexao = mysql.connector.connect(
                        host='localhost',
                        user='root',
                        password='',
                        database='Cadastro_Func',
                    )
                    cursor = conexao.cursor()

                    # Verificar se o cliente já está cadastrado
                    verifica_comando = '''
                    SELECT COUNT(*) FROM cadastro WHERE cpf = %s
                    '''
                    cursor.execute(verifica_comando, (cpf,))
                    resultado = cursor.fetchone()

                    if resultado[0] > 0:
                        messagebox.showerror("Erro", "Cliente já cadastrado.")
                        return

                    # Comando SQL para inserir dados usando placeholders
                    comando = f'''
                    INSERT INTO cadastro (nome, cpf, data_nascimento, rua, numero, bairro, cidade, estado, cep, telefone, email)
                    VALUES ("{nome}", "{cpf}", "{data_nascimento}", "{rua}", "{numero}", "{bairro}", "{cidade}", "{estado}", "{cep}", "{telefone}", "{email}")
                    '''
                    cursor.execute(comando)
                    conexao.commit()

                    # Fechando o cursor e a conexão
                    cursor.close()
                    conexao.close()

                    # Aqui você pode adicionar a lógica para salvar os dados no banco de dados
                    messagebox.showinfo("Sucesso", "Cadastrado com sucesso!")

                except mysql.connector.Error as err:
                    messagebox.showerror("Erro", f"Erro ao conectar ao banco de dados: {err}")

                finally:
                    # Fechando o cursor e a conexão
                    cursor.close()
                    conexao.close()

            # Criação da tela de cadastro de cliente
            nome_label = ctk.CTkLabel(tela_cadastro_cli, text="Nome", font=("gliker", 20))
            nome_label.place(relx=0.19, rely= 0.05)

            cad_nome = ctk.CTkEntry(tela_cadastro_cli, width=200, height=30)
            cad_nome.place(relx=0.05, rely= 0.1)

            cpf_label = ctk.CTkLabel(tela_cadastro_cli, text="CPF", font=("gliker", 20))
            cpf_label.place(relx=0.7, rely= 0.05)

            cad_cpf = ctk.CTkEntry(tela_cadastro_cli, width=150, height=30)
            cad_cpf.place(relx=0.6, rely= 0.1)

            data_nascimento_label = ctk.CTkLabel(tela_cadastro_cli, text="Data de Nascimento", font=("gliker", 20))
            data_nascimento_label.place(relx=0.06, rely= 0.2)

            cad_data_nascimento = ctk.CTkEntry(tela_cadastro_cli, placeholder_text= "(EX: 2010-07-05)",justify= "center", width=150, height=30)
            cad_data_nascimento.place(relx=0.1, rely= 0.25)

            rua_label = ctk.CTkLabel(tela_cadastro_cli, text="Rua", font=("gliker", 20))
            rua_label.place(relx=0.7, rely= 0.2 )

            cad_rua = ctk.CTkEntry(tela_cadastro_cli, width=200, height=30)
            cad_rua.place(relx=0.55, rely= 0.25)

            numero_label = ctk.CTkLabel(tela_cadastro_cli, text="Número", font=("gliker", 20))
            numero_label.place(relx=0.16, rely= 0.35)

            cad_numero = ctk.CTkEntry(tela_cadastro_cli, width=50, height=30)
            cad_numero.place(relx=0.19, rely= 0.40)

            bairro_label = ctk.CTkLabel(tela_cadastro_cli, text="Bairro", font=("gliker", 20))
            bairro_label.place(relx=0.68, rely=0.35)

            cad_bairro = ctk.CTkEntry(tela_cadastro_cli, width=200, height=30)
            cad_bairro.place(relx=0.55, rely= 0.4)

            cidade_label = ctk.CTkLabel(tela_cadastro_cli, text="Cidade", font=("gliker", 20))
            cidade_label.place(relx=0.18, rely= 0.5)

            cad_cidade = ctk.CTkEntry(tela_cadastro_cli, width=200, height=30)
            cad_cidade.place(relx=0.05, rely= 0.55)

            estado_label = ctk.CTkLabel(tela_cadastro_cli, text="Estado", font=("gliker", 20))
            estado_label.place(relx=0.68, rely= 0.5)

            cad_estado = ctk.CTkEntry(tela_cadastro_cli, width=200, height=30)
            cad_estado.place(relx=0.55, rely= 0.55)

            cep_label = ctk.CTkLabel(tela_cadastro_cli, text="CEP", font=("gliker", 20))
            cep_label.place(relx=0.21, rely= 0.65)

            cad_cep = ctk.CTkEntry(tela_cadastro_cli, width=150, height=30)
            cad_cep.place(relx=0.1, rely= 0.7)

            telefone_label = ctk.CTkLabel(tela_cadastro_cli, text="Telefone", font=("gliker", 20))
            telefone_label.place(relx=0.67, rely= 0.65)

            cad_telefone = ctk.CTkEntry(tela_cadastro_cli, width=200, height=30)
            cad_telefone.place(relx=0.55, rely= 0.7) 

            email_label = ctk.CTkLabel(tela_cadastro_cli, text="Email", font=("gliker", 20))
            email_label.place(relx=0.2, rely= 0.8)

            cad_email = ctk.CTkEntry(tela_cadastro_cli, width=200, height=30)
            cad_email.place(relx=0.05, rely= 0.85)

            cadastro_button = ctk.CTkButton(tela_cadastro_cli, text="Cadastrar", command=cadastro, width=135, height=35)
            cadastro_button.place(relx=0.62, rely= 0.84)


            
            
        botao_cad_cli= ctk.CTkButton(frame4, text="Cadastro de Clientes",command= cadastro_cli, width= 235, height= 35)
        botao_cad_cli.place(relx=0.37, rely=0.15)

        def editar_cli():
            tela_cadastro_cli= ctk.CTkToplevel(janela)
            tela_cadastro_cli.title("Editar de Clientes")
            tela_cadastro_cli.geometry("500x580+1260+250")
            tela_cadastro_cli.lift()
            tela_cadastro_cli.attributes('-topmost', True)

            def edit_cli():
                cliente_id = cad_id.get()
                novo_nome = cad_nome.get()
                novo_cpf = cad_cpf.get()
                nova_data_nascimento = cad_data_nascimento.get()
                nova_rua = cad_rua.get()
                novo_numero = cad_numero.get()
                novo_bairro = cad_bairro.get()
                nova_cidade = cad_cidade.get()
                novo_estado = cad_estado.get()
                novo_cep = cad_cep.get()
                novo_telefone = cad_telefone.get()
                novo_email = cad_email.get()

                # Conexão com o banco de dados
                conexao = mysql.connector.connect(
                    host='localhost',
                    user='root',
                    password='',
                    database='Cadastro_Func',
                )
                cursor = conexao.cursor()

                # Atualizando os dados no banco de dados
                comando = """
                UPDATE cadastro 
                SET nome = %s, cpf = %s, data_nascimento = %s, rua = %s, numero = %s, bairro = %s, cidade = %s, estado = %s, cep = %s, telefone = %s, email = %s
                WHERE id_cli = %s
                """
                valores = (novo_nome, novo_cpf, nova_data_nascimento, nova_rua, novo_numero, novo_bairro, nova_cidade, novo_estado, novo_cep, novo_telefone, novo_email, cliente_id)

                try:
                    cursor.execute(comando, valores)
                    conexao.commit()
                    messagebox.showinfo("Sucesso", "Cliente editado com sucesso!")
                except Exception as e:
                    messagebox.showerror("Erro", f"Não foi possível editar o cliente. Erro: {e}")
                finally:
                    cursor.close()
                    conexao.close()

                tela_cadastro_cli.destroy()

            nome_label = ctk.CTkLabel(tela_cadastro_cli, text="Nome", font=("gliker", 20))
            nome_label.place(relx=0.19, rely= 0.05)

            cad_nome = ctk.CTkEntry(tela_cadastro_cli, width=200, height=30)
            cad_nome.place(relx=0.05, rely= 0.1)

            cpf_label = ctk.CTkLabel(tela_cadastro_cli, text="CPF", font=("gliker", 20))
            cpf_label.place(relx=0.7, rely= 0.05)

            cad_cpf = ctk.CTkEntry(tela_cadastro_cli, width=150, height=30)
            cad_cpf.place(relx=0.6, rely= 0.1)

            data_nascimento_label = ctk.CTkLabel(tela_cadastro_cli, text="Data de Nascimento", font=("gliker", 20))
            data_nascimento_label.place(relx=0.06, rely= 0.2)

            cad_data_nascimento = ctk.CTkEntry(tela_cadastro_cli, placeholder_text= "(EX: 2010-07-05)",justify= "center", width=150, height=30)
            cad_data_nascimento.place(relx=0.1, rely= 0.25)

            rua_label = ctk.CTkLabel(tela_cadastro_cli, text="Rua", font=("gliker", 20))
            rua_label.place(relx=0.7, rely= 0.2 )

            cad_rua = ctk.CTkEntry(tela_cadastro_cli, width=200, height=30)
            cad_rua.place(relx=0.55, rely= 0.25)

            numero_label = ctk.CTkLabel(tela_cadastro_cli, text="Número", font=("gliker", 20))
            numero_label.place(relx=0.16, rely= 0.35)

            cad_numero = ctk.CTkEntry(tela_cadastro_cli, width=50, height=30)
            cad_numero.place(relx=0.19, rely= 0.40)

            bairro_label = ctk.CTkLabel(tela_cadastro_cli, text="Bairro", font=("gliker", 20))
            bairro_label.place(relx=0.68, rely=0.35)

            cad_bairro = ctk.CTkEntry(tela_cadastro_cli, width=200, height=30)
            cad_bairro.place(relx=0.55, rely= 0.4)

            cidade_label = ctk.CTkLabel(tela_cadastro_cli, text="Cidade", font=("gliker", 20))
            cidade_label.place(relx=0.18, rely= 0.5)

            cad_cidade = ctk.CTkEntry(tela_cadastro_cli, width=200, height=30)
            cad_cidade.place(relx=0.05, rely= 0.55)

            estado_label = ctk.CTkLabel(tela_cadastro_cli, text="Estado", font=("gliker", 20))
            estado_label.place(relx=0.68, rely= 0.5)

            cad_estado = ctk.CTkEntry(tela_cadastro_cli, width=200, height=30)
            cad_estado.place(relx=0.55, rely= 0.55)

            cep_label = ctk.CTkLabel(tela_cadastro_cli, text="CEP", font=("gliker", 20))
            cep_label.place(relx=0.21, rely= 0.65)

            cad_cep = ctk.CTkEntry(tela_cadastro_cli, width=150, height=30)
            cad_cep.place(relx=0.1, rely= 0.7)

            telefone_label = ctk.CTkLabel(tela_cadastro_cli, text="Telefone", font=("gliker", 20))
            telefone_label.place(relx=0.67, rely= 0.65)

            cad_telefone = ctk.CTkEntry(tela_cadastro_cli, width=200, height=30)
            cad_telefone.place(relx=0.55, rely= 0.7) 

            email_label = ctk.CTkLabel(tela_cadastro_cli, text="Email", font=("gliker", 20))
            email_label.place(relx=0.2, rely= 0.8)

            cad_email = ctk.CTkEntry(tela_cadastro_cli, width=200, height=30)
            cad_email.place(relx=0.05, rely= 0.85)

            id_label = ctk.CTkLabel(tela_cadastro_cli, text="ID", font=("gliker", 20))
            id_label.place(relx=0.74, rely= 0.8)

            cad_id = ctk.CTkEntry(tela_cadastro_cli, width=200, height=30)
            cad_id.place(relx=0.55, rely= 0.85)

            cadastro_button = ctk.CTkButton(tela_cadastro_cli, text="Editar", command=edit_cli, width=135, height=35)
            cadastro_button.place(relx=0.38, rely= 0.92)


        botao_edit_cli= ctk.CTkButton(frame4, text="Edit Cliente",command= editar_cli, width= 185, height= 35)
        botao_edit_cli.place(relx=0.57, rely=0.15)

        #Exibir estoque
        def listar_jogos(plataforma):
            listagem_jogos = ctk.CTkToplevel(janela_home)
            listagem_jogos.title("Lista de Jogos")
            listagem_jogos.geometry("1240x550+330+250")
            listagem_jogos.lift()
            listagem_jogos.attributes('-topmost', True)

            # Conexão com o banco de dados
            conexao = mysql.connector.connect(
                host='localhost',
                user='root',
                password='',
                database='Cadastro_Func',
            )
            cursor = conexao.cursor()

            if plataforma == "Todos":
                comando = "SELECT * FROM games"
                cursor.execute(comando)
            else:
                comando = "SELECT * FROM games WHERE plataform = %s"
                cursor.execute(comando, (plataforma,))
            resultados = cursor.fetchall()

            tree = ttk.Treeview(listagem_jogos, columns=('ID', 'Titulo', 'Genero', 'Plataforma', 'Lancamento', 'Desenvolvedora', 'Preco', 'Estoque'), show='headings')
            tree.heading('ID', text='ID')
            tree.heading('Titulo', text='Titulo')
            tree.heading('Genero', text='Genero')
            tree.heading('Plataforma', text='Plataforma')
            tree.heading('Lancamento', text='Lancamento')
            tree.heading('Desenvolvedora', text='Desenvolvedora')
            tree.heading('Preco', text='Preco')
            tree.heading('Estoque', text='Estoque')

            for row in resultados:
                tree.insert('', 'end', values=row)

            tree.pack(fill='both', expand=True)

            # Fechando o cursor e a conexão
            cursor.close()
            conexao.close()

        # OptionMenu para selecionar a plataforma
        prod_lista= ctk.CTkOptionMenu(frame4, values=["Todos", "PS4", "Xbox One"], width=200, height=35)
        prod_lista.place(relx=0.73, rely=0.15)

        # Botão para buscar a lista de jogos com filtro
        buscar_lista = ctk.CTkButton(frame4, text="Pesquisar", command=lambda: listar_jogos(prod_lista.get()), width=100, height=35)
        buscar_lista.place(relx=0.9, rely=0.15)
    

        close_sessao= ctk.CTkButton(frame3, text="Finalizar seção", command= janela.destroy)
        close_sessao.place(relx=0.7, rely=0.4)
                
    #Botão utilzado para encaminhar as informções de login e verificar se estão no banco de dados
    botao= ctk.CTkButton(frame, text="Enter", font=("gliker", 14), command=verificar_login, anchor='center', )
    botao.pack(pady=25)
    
    
    
    
        
    janela.mainloop()


interface()


    #placeholder_text: método utilizado para adicionar texto na caixa de entrada 
